<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>操作系统大纲</title>
    <link href="/2020/08/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%A7%E7%BA%B2/"/>
    <url>/2020/08/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%A7%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="操作系统之文件系统"><a href="#操作系统之文件系统" class="headerlink" title="操作系统之文件系统"></a>操作系统之文件系统</h2><p>介绍：<br>    进程在运行时，可以在自己的地址空间存储一定量的信息。采用这种信息存储方式有三个问题：</p><pre><code>1. 这些地址空间所能存储的信息十分有限。2.信息可能随着进程的终止而丢失。3.一个进程中的信息不能并发的被多个进程同时访问。解决方法：使信息的存储独立于任何一个进程。那么怎么存储这些信息，解决以上三个问题呢？存储信息可以使用磁盘(magnetic disk)。使信息独立出来被存储。然而还有问题：1.怎么直接快速找到想要的信息；2.怎么防止一个用户访问别的用户的信息（服务器经常遇到的问题）；3.怎么知道哪一块是空闲的。要解决磁盘存储带来的问题，我们建立了文件这个抽象。</code></pre><h3 id="一、文件"><a href="#一、文件" class="headerlink" title="一、文件"></a>一、文件</h3><pre><code>文件的定义：文件是进程所创建的信息逻辑单元，受操作系统管理。进程可以读取已经存在的文件并且在需要的时候创建新的文件。操作系统中处理文件的部分称为文件系统。文件的结构文件有三种构造结构：字节序列、记录序列和树。首先，操作系统并不关心文件是什么内容，它只在乎自己管理的字节。文件内容和含义只在用户程序中解释，操作系统只把文件看做字节序列。</code></pre><p>用户可以向文件中加入任何想要的或特殊的内容，操作系统不会提供任何帮助，但也不构成任何障碍。把文件看做字节，给操作系统提供了最大的灵活性。</p><pre><code>文件类型很多操作系统支持多种文件类型，只讨论普通文件。普通文件: 包含用户信息的文件，分为二进制文件和ASCII文件。ASCII文件：可以显示和打印，可以用任何编辑器编辑。采用这种文件作为输入输出有利于一个程序的输出作为另外一个的输入。二进制文件：有一定的内部结构，使用该文件的程序才了解此结构。只有文件的格式正确时，操作系统才会执行这个文件。文件访问存储介质是磁带时，顺序访问方式是很方便的。不按次序访问文件或目录，这种方法称为随机访问文件。文件属性文件的的附加信息称为文件的属性，不同的操作系统文件的属性各不相同。</code></pre><h3 id="二、目录"><a href="#二、目录" class="headerlink" title="二、目录"></a>二、目录</h3><pre><code>文件系统提供目录或者文件夹，用于记录文件的位置。1.一级目录系统最简单的形式，一级目录系统在一个目录中包含所有的文件，这个目录称为根目录。2.层次目录系统目录树结构的文件系统3.路径名用层次文件系统指定文件所在位置时，常用两种指定方法：绝对路径名和相对路径名。绝对路径名：从根目录到文件的路径。特点：一定从根目录开始，并且唯一。以三种操作系统为例：Windows  \usr\ast\mailboxUNIX     usr/ast/mailboxMULYICS     &gt;usr&gt;ast&gt;mailbox相对路径名：和当前工作目录一起使用。当前工作目录可以由用户指定。所有的不从根目录开始的路径名都是相对路径名。相对路径往往更加方便，功能也和绝对路径完全相同。那么如何选择路径名呢？如果要访问某一个特定的文件而不考虑当前用户的目录，应采用绝对路径。反之可以选择相对路径。无论用户处在哪个目录下，绝对路径总是能很好的工作。特殊的目录项：”.” 和”..” . 指当前目录， .. 指的是父目录（根目录中指向他自己）。三、文件系统的实现我们关心文件和目录是怎么样存储、磁盘空间怎么样管理的，以及怎么保证系统有效持续工作。下面解决这些问题。1.文件系统布局    文件系统存放在磁盘上。多数的磁盘被划分为一个或多个分区，每一个分区中有一个独立的文件系统。磁盘中的0号扇区被称为主引导记录(Master Boot Record , MBR)用于引导计算机。MBR的结尾是分区表。给出了每一个分区的开始和结束地址。分区表中有一个分区被标记为活动分区。计算机被引导时，BIOS读入并执行MBR。MBR首先确定这个活动分区并读入它的第一个块——引导块，并执行。引导块中的程序将装载该分区的操作系统。统一起见，每个分区都从一个引导块开始，即使这个块没有可启动的操作系统。    除了从引导块开始这个统一的特点，磁盘分区布局随着文件系统的不同而变化，但通常含有下列的项目：超级块、空闲的信息、i节点、根目录。2.文件系统的实现    实现的关键问题：记录各个文件分别用到哪个磁盘块。（1）连续分配    把文件作为一系列的连续数据存在磁盘上。例如在块大小为1KB的磁盘上，50KB的文件要分配50个连续的块。注意每个文件都从一个新块开始，也就是说如果有一个文件占据了2.5块的空间那么将有0.5块空间被浪费。    连续分配的优势：·实现简单：只需要记住两个信息即可 —————— 第一块的磁盘地址和文件的块数。读操作性能好。只需寻找第一个块就可以实现方便的读操作    缺点：长时间使用磁盘空间会变得零碎。首先，我们知道有些文件占用不完一整个磁盘块，但文件的存储都是从完整的块开始的；另外如果有文件被删除，那么会留下一大块空闲块；用户向这个块中存储信息，那么信息的大小会被限制——不能超出这个空闲块的大小；如果存储可变的信息，我们不能要求用户提前告知信息的大小；反之如果信息量较小，那么仍然会存在未利用空闲区。尽管可以压缩磁盘，但是涉及到几乎所有文件的复制和再存储，成本代价高昂。（2）链表分配    为每个文件构造磁盘块链表，每个块的第一个字作为指向下一个块的指针，块的其他部分则用来存放数据。-----------------------------------------------2020.6.15更优点：1.充分利用每一个磁盘块，不会出现连续存储的问题——有过多磁盘碎片而浪费空间（除了最后一块的内部碎片）2.顺序访问非常方便。缺点：1.随机访问十分缓慢。2.由于指针占有一定的字节，每一个磁盘块存储数据的字节数不再是2的整数次幂，容易造成访问缓慢。（3）采用内存中的表进行链表分配上述链表的两个不足都可以通过这个方式解决：取出每个磁盘块的指针字，把他们一同存放到内存的某个表中。内存中这样的一个表格叫做文件分配表（FAT）。由于整个链表都存放在内存中，所以不需要任何磁盘引用。缺点：必须把整个表都存放在内存中。（4）i 节点i节点中列出了文件属性和文件块的磁盘地址，是另外一种记录各个文件分别包含哪些磁盘块的方法。优势：给定i节点就能找到文件的所有块。只有对应的文件打开时，他的i 节点才在内存中。相比其他的记录方法，节约了一定的内存空间。3.目录的实现目录系统的主要功能是把ASCII文件名映射成定位文件数据所需的信息。文件属性可以存放在目录中，也可以存放在i节点中。相比之下第二种方法更好。可变长度的文件名怎么实现？几乎所有的现代操作系统都支持可变长度的文件名。处理有三种方法：· 直接给文件名一个长度限制为每个文件名保留固定大小的空间。· 改变目录项的大小· 目录项长度固定，将文件名放在目录后面的堆中。如何快速查找文件？除了从前到后线性地搜索文件，加快文件搜索速度的一个方法是在每个目录中使用散列表：添加一个文件时，与散列值对应的散列表表项进行检查。如果该表项未被使用，就将一个指向文件目录项的指针放入，文件目录项紧跟散列表之后。反之，构造一个链表表头存放在该表项中，并且连接所有的相同的散列值的文件目录项。4.共享文件拥有共享文件的系统文件系统A和B，如果A中的一个文件也出现在B的目录下，那么B的目录和该共享文件的联系称为一个链接。这样文件系统本身是一个有向无环图。5.日志结构文件系统( Log-structured File System, LFS )CPU运行速度越来越快，磁盘空间越来越大，磁盘的高速缓存也在不断增加，但是磁盘的寻道时间没有得到快速发展。大多数文件系统中，写操作都是零碎的。这也意味着增加更多的寻道时间，磁盘的利用率降低到1%以下。日志结构文件系统旨在解决这样的问题：即使面对一个很多的零碎的写操作组成的任务，CPU同样能够充分利用磁盘的带宽。其基本思想是将整个磁盘结构化为一个日志：每隔一段时间，被缓冲在内存中的未决定的写操作，都被放到一个单独的段中，作为在日志末尾的一个邻接段写入磁盘。同时，为了找到i节点，LFS利用维护一张由i节点编号索引组成的i节点图来索引文件。为了检查哪些旧的磁盘块仍然占用着先前段的空间，LFS提出了清理线程。周期性的扫描日志并进行压缩：先读取日志中第一个段的摘要，检查有哪些i 节点和文件；然后清理线程查看当前i节点图，判断节点是否有效，文件是否仍然在使用中；如果没有使用，该信息被丢弃。6.日志文件系统相比于日志结构的文件系统，日志文件系统的出彩之处在于保存了日志结构文件系统的一个重要思想——保存一个用于记录系统下一步要做什么的日志。假设系统正在完成一个任务时出现了崩溃。那么在重启系统后可以通过查看日志获取崩溃前计划要完成的任务，并继续完成他们。相比于日志结构的文件系统，这种日志文件系统得到了广泛的应用。在移除文件操作中，要进行三个操作：1.目录中删除文件；2.释放i节点到空闲i节点池；3.归还磁盘块到空闲磁盘块池。日志文件系统先写一个日志项，列出这三个将要完成的动作；然后这个日志项被写入磁盘；只有日志项写入完毕了，其他的操作才可以进行。所有操作成功后擦除日志项。如果发生崩溃系统可以检查日志项，看看是否有操作未完成，从而完成未完成的工作。被写入日志的操作必须是幂等的。7.虚拟文件系统 ( Virtual File System )虚拟文件系统关键思想是：抽象出所有文件系统的共有部分，并且将这些代码放在共同的一层；该层调用底层的实际文件系统来具体管理数据。VFS对上层用户提供了调用接口，即POSIX接口；VFS也有一个对于实际文件系统的下层接口，VFS接口，这个接口包含许多功能调用。当创造一个新的文件系统协同VFS工作时，新文件系统的设计者就必须明确要确定他提供的VFS需要的系统调用。当系统启动时，根文件系统在VFS中注册。装载其他文件系统时，也必须在VFS中注册。注册时的操作是提供一个包含VFS所需要的函数地址的列表，每个VFS对象一个。因此只要文件在VFS注册了，VFS就知道怎样从它那读取一个块。</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Andrew S.Tanenbaum著 陈向群 马洪兵 等译 Modern Operating Systems[M]. 原书第三版，机械工业出版社.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo个人博客的更多基本操作</title>
    <link href="/2020/08/03/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9B%B4%E5%A4%9A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/08/03/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9B%B4%E5%A4%9A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><pre><code>本文章内容浅显偏重基本操作，只为初学者提供相关的参考。</code></pre><h3 id="概要：-博客中插入图片；-git下拷贝；-简单更换博客的主题；-博客页面美观化；"><a href="#概要：-博客中插入图片；-git下拷贝；-简单更换博客的主题；-博客页面美观化；" class="headerlink" title="概要： 博客中插入图片； git下拷贝； 简单更换博客的主题； 博客页面美观化；"></a>概要： 博客中插入图片； git下拷贝； 简单更换博客的主题； 博客页面美观化；</h3><pre><code>另外，还不清楚怎么部署博客到多个平台的同学参考：https://actonxidian99.gitee.io/2020/07/30/如何用hexo搭建简易的个人博客/</code></pre><h2 id="关于如何在博客中插入图片"><a href="#关于如何在博客中插入图片" class="headerlink" title="关于如何在博客中插入图片"></a>关于如何在博客中插入图片</h2><pre><code>1. 本地引用，在本地的 source 目录下创建一个图片文件夹 imags，存放图片，在博文文章中通过以下格式引用：假如我创建的images目录下有名为 testimage 的 jpg 格式照片，那么引用为：![](/images/testimage.jpg)这样的Markdown语法即可插入本地图片到博客。2. 远程服务端引用，支持引用</code></pre><h2 id="如何在git下复制文件"><a href="#如何在git下复制文件" class="headerlink" title="如何在git下复制文件"></a>如何在git下复制文件</h2><pre><code>使用命令：cat将电脑本地的文件复制到粘贴板：cat filename &gt; /dev/clipboard粘贴板的内容复制到本地文件（这个本地文件支持txt和doc文件等）：cat /dev/clipboard &gt; filename</code></pre><h2 id="简单地更换博客主题"><a href="#简单地更换博客主题" class="headerlink" title="简单地更换博客主题"></a>简单地更换博客主题</h2><pre><code>更换博客的主题，让你的博客看起来更美观。可以借用hexo提供的模板，在官网hexo.io上可以找到更多模板。以yilia为例：网址：github.com/litten/hexo-theme-yilia1. 本地git端下载主题： blog 目录下，git clone https://github.com/litten/hexo-theme-yilia.git themes/yilla 将该网址下的主题复制到本地的themes/yilia目录下。如果和github的链接太慢，可以去下载压缩包，手动解压复制到当前的文件下。当然你需要重命名这个解压文件。2. 进入theme目录下，ls可以看到刚下载的主题。3. 配置到自己的博客：blog目录下再次配置 _config.yml文件：找到Theme，将原来的主题换成yilia.4. 回去blog目录hexo g, hexo s即可在本地端口查看到自己的主题。当然你也可以再立刻 hexo d，和刚才一样。把新的主题格式推到github远端上去。</code></pre><h2 id="博客页面更加美观"><a href="#博客页面更加美观" class="headerlink" title="博客页面更加美观"></a>博客页面更加美观</h2><pre><code>1. 下载你心仪的主题时，注意，在对应的主题说明文件中有相关的详细配置，比如我应用的fluid主题相关的配置文件：https://hexo.fluid-dev.com/docs/guide/2. 确定主题之后根据相应的详细配置说明文档，更好地布置你博客页面的字体、颜色、图片和链接吧！</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何用hexo搭建简易的个人博客</title>
    <link href="/2020/07/30/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/07/30/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="有关如何用hexo搭建简易个人博客的一些声明"><a href="#有关如何用hexo搭建简易个人博客的一些声明" class="headerlink" title="有关如何用hexo搭建简易个人博客的一些声明"></a>有关如何用hexo搭建简易个人博客的一些声明</h2><p>   本文章的教学范围仅限于搭建简易的个人博客，是参考 codesheep 在B站上的视频的程序一步步做出来的，想要深入了解的读者可以去仔细研读。本文章只是对羊哥视频的复盘，仅供仍然存在困难的读者一些参考。作者安装的Windows 64位，和羊哥的Mac版本略有不同。</p><h3 id="概要：搭建hexo博客；-将博客部署到github、码云、coding平台的方法。"><a href="#概要：搭建hexo博客；-将博客部署到github、码云、coding平台的方法。" class="headerlink" title="概要：搭建hexo博客； 将博客部署到github、码云、coding平台的方法。"></a>概要：搭建hexo博客； 将博客部署到github、码云、coding平台的方法。</h3><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ol><li><p>安装node.js，下载网址：nodejs.org。</p></li><li><p>Windows需要安装git版本控制工具，bai du git下载就能找到。如果觉得下载太慢或无法打开页面，分享我的百度网盘链接：<a href="https://pan.baidu.com/s/1SnmSX1YhbEf65Sk2TrfEVA">https://pan.baidu.com/s/1SnmSX1YhbEf65Sk2TrfEVA</a> 提取码 dcf8，Windows64位2.27版本的。</p></li><li><p>Windows下载后安装git，在网上搜索安装教程即可，应该是要和node工具在一个目录下，因为在不同目录下的尝试没成功。</p><p>这两部分的安装可参考hexo的官方中文文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></li><li><p>打开git bash。</p></li><li><p>依次输入以下命令</p><p>npm install -g cnpm –rigistry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 先借助cnpm安装<br>cnpm install -g hexo-cli 安装hexo博客框架<br>hexo -v 可以查看当前安装的hexo版本</p><p>mkdir blog 在当前路径建立一个博客目录<br>cd blog/ 进入建立的目录</p><p>hexo init 初始化一个博客，这个过程有时候非常漫长，只要不报错总是好的。</p><p>hexo s 启动博客</p><p>会生成一个本地网址，打开就能看到hexo创建的默认博客。</p></li><li><p>新建一篇文章<br>hexo new “我的第一篇博客”，会生成该文章文件和目录。进入这个目录下，就会看到生成的文件了。之后你可以用vi编辑器写文章内容了，支持Markdown格式。</p></li><li><p>退回到blog目录下，生成编辑文章：hexo g</p></li><li><p>输入 hexo s启动博客，即可看到新添加的博文。</p></li></ol><h2 id="博客的简单布置"><a href="#博客的简单布置" class="headerlink" title="博客的简单布置"></a>博客的简单布置</h2><h3 id="博客配置到github"><a href="#博客配置到github" class="headerlink" title="博客配置到github"></a>博客配置到github</h3><p>   配置博客到github，这样就不必始终在本地端口访问了，可以在生成自己的博客网址了。</p><ol><li><p>登陆github，右上角+号，New repository。</p></li><li><p>命名：自己的昵称.github.io，这个地址会作为博客的网址。</p></li><li><p>命令行，博客的blog路径下输入 cnpm install –save hexo-deployer-git，安装一个插件。</p></li><li><p>安装完成后，ls 打开列表，修改_config.yml文件：vim _config.yml，打开后跳到文件末尾，最后的type: 后面修改如下：</p><p>type: git<br>repo: (这里复制刚才新建的_仓库地址)<br>branch: master</p><p>保存退出.</p><p><img src="/images/configyml.jpg"></p></li></ol><ol start="5"><li>部署到远端：hexo d ，根据提示输入账号和密码.windows下可能出现错误提示：</li></ol><p>   <img src="/images/warning.jpg"></p><pre><code>   执行提示中的指令，进行github身份核实：</code></pre><p>   <img src="/images/word.jpg"></p><ol start="6"><li><p>刷新github仓库就可以看到更新的内容，此时的仓库名字可以直接在浏览器访问了。</p></li><li><p>无法访问有几种情况：</p><p>（1）用户名和仓库名字不一致，查看自己github的账号名称和创建的库名称是否一致。</p><p>（2）手机端可以打开但是电脑端页面找不到，有可能是网络问题，别人的网络或许可以访问你的博客；或者是本地无法和github通信，后者请参考这篇文章：</p><p><a href="https://www.cnblogs.com/notstandalone/p/12496548.html">https://www.cnblogs.com/notstandalone/p/12496548.html</a></p><p>（3）由于网络问题导致的电脑端无法访问，可以考虑部署博客到国内的平台上。</p></li></ol><h3 id="博客部署到码云"><a href="#博客部署到码云" class="headerlink" title="博客部署到码云"></a>博客部署到码云</h3><pre><code>国内的部署可以更快地访问。部署到码云的步骤和github基本相同。（1）注册并且登陆码云。（2）创建一个新的仓库。（3）在码云上添加本地电脑的SSH公钥。（4）配置博客的_config.yml文件，repo：你的码云仓库网址。（5）如果你的配置文件里已经有github的仓库网址，删除或注释掉它。（6）hexo clean + hexo g + hexo d可以把本地的博客推到码云的仓库里。（7）去到仓库里的“服务“板块，部署打开仓库的pages服务：</code></pre><p><img src="/img/posts/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitee.png"></p><pre><code>    后会自动产生访问链接。</code></pre><h3 id="博客同时部署到多个平台"><a href="#博客同时部署到多个平台" class="headerlink" title="博客同时部署到多个平台"></a>博客同时部署到多个平台</h3><pre><code>（1）首先需要在这些平台上都创建相应的仓库；（2）修改 _config.yml文件，repo配置更改示例如下：</code></pre><p><img src="/img/posts/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/repo.png"></p><pre><code>（3）进入source目录下，创建文件： touch Staticfile，必须是这个文件名。（4）hexo clean + hexo g + hexo d 就可以同时推送到配置的多个平台上。</code></pre><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>   作者后续会进行相应的更新，包括插入图片、超链接、配置更美观的界面等。请关注作者的其他文章。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>codesheep: <a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=11743305723526974314">https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=11743305723526974314</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
